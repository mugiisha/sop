default:
  image: maven:3.8.8-eclipse-temurin-21
  services:
    - docker:dind

stages:
  - detect-changes
  - build-proto
  - build
  - deploy

variables:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: $DOCKERHUB_USERNAME
  DOCKER_PASSWORD: $DOCKER_PASSWORD
  IMAGE_NAME: sop-rw
  BASE_BRANCH: develop
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
  DOCKER_BUILDKIT: "1"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  AVAILABLE_SERVICES: "role-access-control-service user-management-service discovery-service gateway-service analytics-insights-service audit-compliance-tracking-service compliance-reporting-service notification-service sop-content-service sop-recommendation-service sop-workflow-service version-control-service"

detect-changes:
  stage: detect-changes
  script:
    - echo "Fetching the latest base branch history..."
    - git fetch origin $BASE_BRANCH --prune
    - |
      echo "Identifying changes..."
      
      # For develop branch, get all services
      if [ "$CI_COMMIT_BRANCH" = "develop" ]; then
        echo "On develop branch - including all services"
        export CHANGED_SERVICES="$AVAILABLE_SERVICES"
      else
        # Try to get the last merge commit first
        lastMergeCommit=$(git log --merges --pretty=format:'%H' -n 1 origin/$BASE_BRANCH || true)
        
        if [ -z "$lastMergeCommit" ]; then
          echo "No merge commits found, using the last commit instead..."
          lastMergeCommit=$(git log --pretty=format:'%H' -n 1 origin/$BASE_BRANCH)
        fi
        
        if [ -z "$lastMergeCommit" ]; then
          echo "Failed to identify any commits on branch '$BASE_BRANCH'."
          exit 1
        fi
        
        echo "Reference commit SHA: $lastMergeCommit"
        
        echo "Detecting changed files since the reference commit..."
        detectedChanges=$(git diff --name-only $lastMergeCommit...HEAD | sort -u)
        if [ -z "$detectedChanges" ]; then
          echo "No changes detected in the repository."
          echo "export CHANGED_SERVICES=\"\"" > changes
          exit 0
        fi
        
        echo "Identifying services from changed files..."
        servicesInChanges=()
        for change in $detectedChanges; do
          service=$(echo $change | cut -d '/' -f 1)
          if [[ " $AVAILABLE_SERVICES " == *" $service "* ]]; then
            servicesInChanges+=($service)
          fi
        done
        export CHANGED_SERVICES=$(echo "${servicesInChanges[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
      fi
    - echo "Services to process:" $CHANGED_SERVICES
    - echo "export CHANGED_SERVICES=\"$CHANGED_SERVICES\"" > changes
    - chmod +x changes
  artifacts:
    paths:
      - changes
    expire_in: 1h
    when: always

build-proto:
  stage: build-proto
  script:
    - echo "Building proto service..."
    - cd proto || exit 1
    - mvn clean package -DskipTests
    - mkdir -p ../libs
    - cp target/*.jar ../libs/
    - cd .. || exit 1
  artifacts:
    paths:
      - libs
    expire_in: 1h
    when: always

build:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
      command: [ "--tls=false" ]
  needs:
    - job: build-proto
      artifacts: true
    - job: detect-changes
      artifacts: true
  before_script:
    - apk add --no-cache bash
    - |
      # Check if changes file exists and has content
      if [ ! -f "changes" ]; then
        echo "No changes file found, creating empty changes file"
        echo "export CHANGED_SERVICES=\"\"" > changes
      fi
    - chmod +x changes
    - echo "Logging into Docker registry..."
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    - source changes || echo "Failed to source changes file"
    - |
      if [ -z "$CHANGED_SERVICES" ]; then
        echo "No services to build"
        exit 0
      fi
      
      echo "Building the following services: $CHANGED_SERVICES"
      
      for SERVICE in $CHANGED_SERVICES; do
        if [[ "${SERVICE}" != "proto" ]]; then
          echo "=== Starting build for ${SERVICE} ==="
          
          if [ ! -d "${SERVICE}" ]; then
            echo "Error: Directory ${SERVICE} does not exist!"
            continue
          fi
      
          if [ ! -f "${SERVICE}/Dockerfile" ]; then
            echo "Error: Dockerfile missing for ${SERVICE}"
            continue
          fi
      
          mkdir -p "${SERVICE}/libs/"
          cp libs/*.jar "${SERVICE}/libs/" 2>/dev/null || true
      
          CURRENT_DIR=$(pwd)
          cd "${SERVICE}" || exit 1
      
          # Build directly with latest tag
          echo "Building image ${DOCKER_REGISTRY}/${DOCKER_USERNAME}/${IMAGE_NAME}:${SERVICE}-latest"
          if ! docker build -t "${DOCKER_REGISTRY}/${DOCKER_USERNAME}/${IMAGE_NAME}:${SERVICE}-latest" .; then
            echo "Error: Docker build failed for ${SERVICE}"
            cd "${CURRENT_DIR}" || exit 1
            continue
          fi
          
          # Only push if on develop branch
          if [ "$CI_COMMIT_BRANCH" = "develop" ]; then
            echo "Pushing latest image for ${SERVICE}"
            if ! docker push "${DOCKER_REGISTRY}/${DOCKER_USERNAME}/${IMAGE_NAME}:${SERVICE}-latest"; then
              echo "Error: Docker push failed for ${SERVICE}"
              cd "${CURRENT_DIR}" || exit 1
              continue
            fi
          fi
      
          cd "${CURRENT_DIR}" || exit 1
          echo "=== ${SERVICE} build and push complete ==="
        fi
      done
  after_script:
    - docker logout
  artifacts:
    paths:
      - changes
    expire_in: 1h
    when: always

deploy:
  stage: deploy
  image: alpine:latest
  needs:
    - job: build
      artifacts: true
    - job: detect-changes
      artifacts: true
  before_script:
    - apk add --no-cache openssh bash
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts 2>/dev/null
    - |
      if [ ! -f "changes" ]; then
        echo "No changes file found, creating empty changes file"
        echo "export CHANGED_SERVICES=\"\"" > changes
      fi
    - chmod +x changes
  script:
    - source changes || echo "Failed to source changes file"
    - |
      if [ -z "$CHANGED_SERVICES" ]; then
        echo "No services to deploy"
        exit 0
      fi
      
      echo "Deploying services: $CHANGED_SERVICES"
      ssh -i ~/.ssh/id_rsa ubuntu@$DEPLOY_SERVER "
        set -e
        echo 'Starting deployment process...'
        cd /home/projects/sop-rw || exit 1
      
        echo 'Logging into Docker registry...'
        echo '$DOCKER_PASSWORD' | docker login -u '$DOCKER_USERNAME' --password-stdin
      
        echo 'Cleaning up unused Docker resources...'
        docker system prune -f
      
        for SERVICE in $CHANGED_SERVICES; do
          if [[ \"\${SERVICE}\" != \"proto\" ]]; then
            echo \"=== Deploying \${SERVICE} ===\"
      
            echo \"Pulling latest image...\"
            if ! docker pull ${DOCKER_REGISTRY}/${DOCKER_USERNAME}/${IMAGE_NAME}:\${SERVICE}-latest; then
              echo \"Error: Failed to pull image for \${SERVICE}\"
              continue
            fi
      
            echo \"Starting service...\"
            if ! docker compose up -d \${SERVICE}; then
              echo \"Error: Failed to start \${SERVICE}\"
              continue
            fi
      
            echo \"=== \${SERVICE} deployment complete ===\"
          fi
        done
      
        echo 'Logging out of Docker registry...'
        docker logout
      
        echo 'Deployment process completed successfully'"
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - when: never