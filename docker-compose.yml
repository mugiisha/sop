version: '3'

services:
  # Infrastructure Services
  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - sop-network
    volumes:
      - redis-data:/data

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - sop-network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    networks:
      - sop-network
    volumes:
      - mongo-data:/data/db

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"
    networks:
      - sop-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    networks:
      - sop-network

  # Discovery Service
  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      - EUREKA_CLIENT_REGISTERWITHERUREKA=false
      - EUREKA_CLIENT_FETCHREGISTRY=false
    networks:
      - sop-network

  # API Gateway Service
  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "5050:8084"
    environment:
      - SPRING_CLOUD_DISCOVERY_ENABLED=true
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - discovery-service
    networks:
      - sop-network

  # Application Services
  analytics-insights-service:
    build:
      context: ./analytics-insights-service
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=${MONGODB_URI}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SPRING_REDIS_HOST=${SPRING_REDIS_HOST}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - mongodb
      - kafka
      - redis
      - discovery-service
    networks:
      - sop-network

  audit-compliance-tracking-service:
    build:
      context: ./audit-compliance-tracking-service
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    environment:
      - SPRING_DATASOURCE_URL=${AUDIT_COMPLIANCE_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - postgres
      - kafka
      - discovery-service
    networks:
      - sop-network

  compliance-reporting-service:
    build:
      context: ./compliance-reporting-service
      dockerfile: Dockerfile
    ports:
      - "8083:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=${MONGODB_URI}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - mongodb
      - kafka
      - discovery-service
    networks:
      - sop-network

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    environment:
      - SPRING_REDIS_HOST=${SPRING_REDIS_HOST}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - redis
      - kafka
      - discovery-service
    networks:
      - sop-network

  role-access-control-service:
    build:
      context: ./role-access-control-service
      dockerfile: Dockerfile
    ports:
      - "8085:8080"
    environment:
      - SPRING_DATASOURCE_URL=${ROLE_ACCESS_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_REDIS_HOST=${SPRING_REDIS_HOST}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - postgres
      - redis
      - discovery-service
    networks:
      - sop-network

  sop-content-service:
    build:
      context: ./sop-content-service
      dockerfile: Dockerfile
    ports:
      - "8086:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=${MONGODB_URI}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SPRING_REDIS_HOST=${SPRING_REDIS_HOST}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - mongodb
      - kafka
      - redis
      - discovery-service
    networks:
      - sop-network

  sop-recommendation-service:
    build:
      context: ./sop-recommendation-service
      dockerfile: Dockerfile
    ports:
      - "8087:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=${MONGODB_URI}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SPRING_REDIS_HOST=${SPRING_REDIS_HOST}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - mongodb
      - kafka
      - redis
      - discovery-service
    networks:
      - sop-network

  sop-workflow-service:
    build:
      context: ./sop-workflow-service
      dockerfile: Dockerfile
    ports:
      - "8088:8080"
    environment:
      - SPRING_DATASOURCE_URL=${SOP_WORKFLOW_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - postgres
      - kafka
      - discovery-service
    networks:
      - sop-network

  user-management-service:
    build:
      context: ./user-management-service
      dockerfile: Dockerfile
    ports:
      - "8089:8080"
    environment:
      - SPRING_DATASOURCE_URL=${USER_MANAGEMENT_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_REDIS_HOST=${SPRING_REDIS_HOST}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - postgres
      - redis
      - discovery-service
    networks:
      - sop-network

  version-control-service:
    build:
      context: ./version-control-service
      dockerfile: Dockerfile
    ports:
      - "8090:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=${MONGODB_URI}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      - mongodb
      - kafka
      - discovery-service
    networks:
      - sop-network

networks:
  sop-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  mongo-data: